{"version":3,"sources":["components/DateTime.js","components/WeatherCard.js","components/titleCase.js","components/Form.js","App.js","index.js"],"names":["DateTime","currentDate","Date","day","getDay","date","getDate","month","getMonth","hour","getFullYear","getHours","minutes","getMinutes","useState","AMPM","setAMPM","formattedHour","formatHour","formattedMinutes","formatMinutes","className","toUpperCase","WeatherCard","props","formattedDescription","str","split","i","length","charAt","slice","join","titleCase","description","city","temp","Math","round","Form","zip","setZip","setCity","setTemp","setDescription","apikey","geocodingPath","a","axios","get","res1","data","console","log","name","lat","lon","res2","data2","current","weather","onSubmit","e","preventDefault","getWeather","placeholder","type","value","onChange","target","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAGe,SAASA,IAEtB,IAAIC,EAAc,IAAIC,KAClBC,EAAMF,EAAYG,SAClBC,EAAOJ,EAAYK,UACnBC,EAAQN,EAAYO,WAEpBC,GADOR,EAAYS,cACZT,EAAYU,YACnBC,EAAUX,EAAYY,aARO,EAUTC,mBAAS,MAVA,mBAU1BC,EAV0B,KAUpBC,EAVoB,OAWaF,mBAAS,IAXtB,6BAiDjC,IAAIG,EARJ,SAAoBR,GAClB,OAAIA,EAAO,IACTO,EAAQ,MACDP,EAAO,IAEPA,EAGSS,CAAWT,GAS/B,IAAIU,EAPJ,SAAuBP,GACrB,OAAIA,EAAU,GACLA,EAAU,IAEVA,EAGYQ,CAAcR,GAErC,OACE,8BACE,qBAAIS,UAAU,iBAAd,UAhDS,CACX,SACA,SACA,UACA,YACA,WACA,SACA,YA0CUlB,GAAKmB,cADb,MArCW,CACb,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,OA0BwCf,GAAOe,cAD7C,IAC6DjB,EAD7D,KACqE,IAClEY,EAFH,IAEmBE,EAFnB,IAEsCJ,O,KC9D7B,SAASQ,EAAYC,GAElC,IAAIC,ECPS,SAAmBC,GAChCA,EAAMA,EAAIC,MAAM,KAChB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,IAC9BF,EAAIE,GAAKF,EAAIE,GAAGE,OAAO,GAAGR,cAAgBI,EAAIE,GAAGG,MAAM,GAEzD,OAAOL,EAAIM,KAAK,KDEWC,CAAUT,EAAMU,aAC3C,OACE,sBAAKb,UAAU,cAAf,UACE,oBAAIA,UAAU,oBAAd,SAAmCG,EAAMW,OACzC,qBAAKd,UAAU,wBAAf,SACE,cAACrB,EAAD,MAEF,gCACkB,KAAfwB,EAAMY,MACL,oBAAIf,UAAU,oBAAd,SAAmCgB,KAAKC,MAAMd,EAAMY,MAAQ,SAG9D,6BAAKX,UEdE,SAASc,IAAO,MAEPzB,mBAAS,IAFF,mBAEtB0B,EAFsB,KAEjBC,EAFiB,OAGL3B,mBAAS,MAHJ,mBAGtBqB,EAHsB,KAGhBO,EAHgB,OAIL5B,mBAAS,IAJJ,mBAItBsB,EAJsB,KAIhBO,EAJgB,OAKS7B,mBAAS,IALlB,mBAKtBoB,EALsB,KAKTU,EALS,KAQvBC,EAAS,mCACTC,EAAa,wDAAoDN,EAApD,kBAAiEK,GATvD,4CAY7B,kCAAAE,EAAA,+EAEuBC,IAAMC,IAAIH,GAFjC,cAEUI,EAFV,OAGUC,EAAOD,EAAKC,KAClBC,QAAQC,IAAIF,GACZT,EAAQS,EAAKG,MALjB,SAMuBN,IAAMC,IAAN,8DACsCE,EAAKI,IAD3C,gBACsDJ,EAAKK,IAD3D,kBACwEX,EADxE,oBANvB,OAMUY,EANV,OASUC,EAAQD,EAAKN,KAEnBP,EAAec,EAAMC,QAAQC,QAAQ,GAAG1B,aACxCS,EAAQe,EAAMC,QAAQvB,MACtBgB,QAAQC,IAAIK,GAbhB,kDAeIN,QAAQC,IAAR,MAfJ,2DAZ6B,sBA+B7B,OACE,gCAEE,sBACEQ,SAAU,SAACC,GACTA,EAAEC,iBApCmB,mCAqCrBC,IAHJ,SAME,uBACEC,YAAY,YACZC,KAAK,OACLC,MAAO3B,EACP4B,SAAU,SAACN,GACTrB,EAAOqB,EAAEO,OAAOF,YAItB,wBAAQD,KAAK,SAAb,mBAEA,cAAC3C,EAAD,CACEY,KAAMA,EACND,YAAaA,EACbE,KAAMA,OChDCkC,MARf,WACE,OACE,qBAAKjD,UAAU,MAAf,SACE,cAACkB,EAAD,OCFNgC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.94cfba2e.chunk.js","sourcesContent":["// Date instances inherit from Date.prototype\nimport React, { useState } from \"react\";\n\nexport default function DateTime() {\n  // Variables\n  let currentDate = new Date();\n  let day = currentDate.getDay();\n  let date = currentDate.getDate();\n  let month = currentDate.getMonth();\n  let year = currentDate.getFullYear();\n  let hour = currentDate.getHours();\n  let minutes = currentDate.getMinutes();\n  // Hooks\n  const [AMPM, setAMPM] = useState(\"AM\");\n  const [backgroundClass, setBackgroundClass] = useState(\"\");\n\n  // Days of Week\n  const days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  // Months\n  const months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sept\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n\n  // Format Time Functions\n  function formatHour(hour) {\n    if (hour > 12) {\n      setAMPM(\"PM\");\n      return hour - 12;\n    } else {\n      return hour;\n    }\n  }\n  let formattedHour = formatHour(hour);\n\n  function formatMinutes(minutes) {\n    if (minutes < 10) {\n      return minutes + \"0\";\n    } else {\n      return minutes;\n    }\n  }\n  let formattedMinutes = formatMinutes(minutes);\n\n  return (\n    <div>\n      <h2 className=\"DateTime__date\">\n        {days[day].toUpperCase()} | {months[month].toUpperCase()} {date} |{\" \"}\n        {formattedHour}:{formattedMinutes} {AMPM}\n      </h2>\n      {/* <h2>\n        {formattedHour}:{formattedMinutes} {AMPM}\n      </h2> */}\n    </div>\n  );\n}\n","import React from \"react\";\nimport DateTime from \"./DateTime\";\nimport titleCase from \"./titleCase\";\nimport \"../App.css\";\n\nexport default function WeatherCard(props) {\n  // Title Case\n  let formattedDescription = titleCase(props.description);\n  return (\n    <div className=\"WeatherCard\">\n      <h1 className=\"WeatherCard__city\">{props.city}</h1>\n      <div className=\"WeatherCard__dateTime\">\n        <DateTime />\n      </div>\n      <div>\n        {props.temp !== \"\" && (\n          <h1 className=\"WeatherCard__temp\">{Math.round(props.temp) + \"Â°\"}</h1>\n        )}\n\n        <h3>{formattedDescription}</h3>\n      </div>\n    </div>\n  );\n}\n","export default function titleCase(str) {\n  str = str.split(\" \");\n  for (let i = 0; i < str.length; i++) {\n    str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);\n  }\n  return str.join(\" \");\n}\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport WeatherCard from \"./WeatherCard\";\nimport \"../App.css\";\n\nexport default function Form() {\n  // Hooks\n  const [zip, setZip] = useState(\"\");\n  const [city, setCity] = useState(null);\n  const [temp, setTemp] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n\n  // Variables\n  const apikey = \"0853c15130697cb0030dc6c83d7ae9cd\";\n  const geocodingPath = `http://api.openweathermap.org/geo/1.0/zip?zip=${zip}&appid=${apikey}`;\n\n  // Get Weather\n  async function getWeather() {\n    try {\n      const res1 = await axios.get(geocodingPath);\n      const data = res1.data;\n      console.log(data);\n      setCity(data.name);\n      const res2 = await axios.get(\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${data.lat}&lon=${data.lon}&appid=${apikey}&units=imperial`\n      );\n      const data2 = res2.data;\n      // console.log(data2.current.weather[0].main);\n      setDescription(data2.current.weather[0].description);\n      setTemp(data2.current.temp);\n      console.log(data2);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  return (\n    <div>\n      {/* Form  */}\n      <form\n        onSubmit={(e) => {\n          e.preventDefault(); //prevent page reload\n          getWeather();\n        }}\n      >\n        <input\n          placeholder=\"Enter ZIP\"\n          type=\"text\"\n          value={zip}\n          onChange={(e) => {\n            setZip(e.target.value);\n          }}\n        />\n      </form>\n      <button type=\"submit\">Enter</button>\n\n      <WeatherCard\n        city={city}\n        description={description}\n        temp={temp}\n      ></WeatherCard>\n    </div>\n  );\n}\n","import Form from \"./components/Form\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}